<?php

namespace App\Controller;

use App\Entity\Advert;
use App\Entity\Messages;
use App\Form\AdvertType;
use App\Form\MessageType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\Exception\FileException;


use Symfony\Component\HttpFoundation\Request;


class AdvertController extends AbstractController
{
    /**
     * @Route("/advert", name="advert")
     */
    public function index()
    {
        return $this->render('advert/details.html.twig');
    }

    /**
     * @Route("/deposer", name="advert_depot")
     * @var Symfony\Component\HttpFoundation\File\UploadedFile $file
     */
    public function createAdvert(Request $request)
    {

        //Formulaire du messages
        //$question = new Question();
        $Advert =  new Advert();
        //creation de l'association avec l'utlisateur
        $Advert->setUser($this->getUser());
        //creation des formulaire
        $advertForm = $this->createForm(AdvertType::class,$Advert);
        //$questionForm  = $this->createForm(QuestionType::class,$question);
        //$questionForm->handleRequest($request);

        $advertForm->handleRequest($request);
        if ( $advertForm->isSubmitted()&& $advertForm->isValid()){

            // $file stores the uploaded PDF file
            /**  */
           // $file =$Advert->getImage();
           // dd($Advert);
            $file = $advertForm->get('Image')->getData();


            // Move the file to the directory where brochures are stored

                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                try {
                    $file->move(
                        $this->getParameter('brochures_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $Advert->setImage($fileName);
            $em= $this->getDoctrine()->getManager();
            $em-> persist($Advert);
            $em->flush();
            $this->addFlash('success','merci de votre contribution');
            //rediriger la page
            return $this->redirectToRoute('home');
        }

        return $this->render('advert/index.html.twig',['advertForm'=>$advertForm->createView()]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    /**
     * @Route("/annonces/{id}", name="annonce_detail", requirements ={"id":"\d+"}, methods={"GET","POST"})
     *
     */

    public function details($id,Request $request)
    {
        $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
        $advert = $advertRepository->find($id);

        //Formulaire du messages
        //$question = new Question();
        $message =  new Messages();
        //creation de l'association
        $message->setAdvert($advert);
        //relation avec User
        $message->setUser($this->getUser());
        //creation des formulaire
        $messageForm = $this->createForm(MessageType::class,$message);
        //$questionForm  = $this->createForm(QuestionType::class,$question);
        //$questionForm->handleRequest($request);
        ;
        $messageForm->handleRequest($request);
        if ( $messageForm->isSubmitted()&& $messageForm->isValid()){
            $em= $this->getDoctrine()->getManager();
            $em-> persist($message);
            $em->flush();
            $this->addFlash('success','merci de votre contribution');
            //rediriger la page
            return $this->redirectToRoute('annonce_detail',['id'=>$advert->getId()]);
        }

        return $this->render('advert/details.html.twig',['advert'=>$advert,'messageFrom'=>$messageForm->createView()] );
    }


    // lister les
    /**
     * @Route(
     *     "/annonces",
     *     name="annonces_list",
     *      methods={"GET"}
     *     )
     */

    public function list()
    {
        //select * from question where status = 'deting' order by supports desc limit 1000
        // $questionRepository = $this->getDoctrine()->getRepository(Question::class);
        $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
        $advert = $advertRepository->findAll();
        //$question = $questionRepository->findAll();
        return $this->render('advert/list.html.twig',['advert'=>$advert]);
    }
}
