<?php

namespace App\Controller;

use App\Entity\Advert;
use App\Entity\Categorie;
use App\Entity\Messages;
use App\Entity\Region;
use App\Form\AdvertType;
use App\Form\MessageType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;



class AdvertController extends Controller
{
    /**
     * @Route("/advert", name="advert")
     */
    public function index()
    {
        return $this->render('advert/details.html.twig');
    }

    /**
     * @Route("/deposer", name="advert_depot")
     * @var Symfony\Component\HttpFoundation\File\UploadedFile $file
     */
    public function createAdvert(Request $request)
    {

        //Formulaire du messages
        //$question = new Question();
        $Advert =  new Advert();
        //creation de l'association avec l'utlisateur
        $Advert->setUser($this->getUser());
        //creation des formulaire
        $advertForm = $this->createForm(AdvertType::class,$Advert);
        //$questionForm  = $this->createForm(QuestionType::class,$question);
        //$questionForm->handleRequest($request);

        $advertForm->handleRequest($request);
        if ( $advertForm->isSubmitted()&& $advertForm->isValid()){

            // $file stores the uploaded PDF file
            /**  */
           // $file =$Advert->getImage();
           // dd($Advert);
            $file = $advertForm->get('Image')->getData();


            // Move the file to the directory where brochures are stored

                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                try {
                    $file->move(
                        $this->getParameter('brochures_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $Advert->setImage($fileName);
            $em= $this->getDoctrine()->getManager();
            $em-> persist($Advert);
            $em->flush();
            $this->addFlash('success','merci de votre contribution');
            //rediriger la page
            return $this->redirectToRoute('home');
        }


        return $this->render('advert/index.html.twig',['advertForm'=>$advertForm->createView()]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    /**
     * @Route("/annonces/{id}", name="annonce_detail", requirements ={"id":"\d+"}, methods={"GET","POST"})
     *
     */

    public function details($id,Request $request)
    {
        $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
        $advert = $advertRepository->find($id);

        //Formulaire du messages
        //$question = new Question();
        $message =  new Messages();
        //creation de l'association
        $message->setAdvert($advert);
        //relation avec User
        //$message->setUser($this->getUser());
        //creation des formulaire
        $messageForm = $this->createForm(MessageType::class,$message);
        //$questionForm  = $this->createForm(QuestionType::class,$question);
        //$questionForm->handleRequest($request);
        ;
        $messageForm->handleRequest($request);
        if ( $messageForm->isSubmitted()&& $messageForm->isValid()){
            $em= $this->getDoctrine()->getManager();
            $em-> persist($message);
            $em->flush();
            $this->addFlash('success','merci de votre contribution');
            //rediriger la page
            return $this->redirectToRoute('annonce_detail',['id'=>$advert->getId()]);
        }

        return $this->render('advert/details.html.twig',['advert'=>$advert,'messageFrom'=>$messageForm->createView()] );
    }


    // lister les
    /**
     * @Route(
     *     "/annonces",
     *     name="annonces_list",
     *      methods={"GET"}
     *     )
     */

    public function list(Request $request)
    {
        //select * from question where status = 'deting' order by supports desc limit 1000
        // $questionRepository = $this->getDoctrine()->getRepository(Question::class);
        $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
        $advert = $advertRepository->findBy(
            ['Status' => '1'], //where
            ['id' => 'DESC'],// order by
            1000,//limit
            0
        );

        //toutes les categories
        $categoriRepository = $this->getDoctrine()->getRepository(Categorie::class);
        $categorie = $categoriRepository->findAll();

        //toutes les Regions
        $regionRepository = $this->getDoctrine()->getRepository(Region::class);
        $region = $regionRepository->findAll();


        //$question = $questionRepository->findAll();
        /* @var $paginator \Knp\Component\Pager\Paginator */
        $paginator  = $this->get('knp_paginator');

        // Paginate the results of the query
        $appointments = $paginator->paginate(
        // Doctrine Query, not results
            $advert,
            // Define the page parameter
            $request->query->getInt('page', 1),
            // Items per page
            6
        );
        return $this->render('advert/list.html.twig',['advert'=>$appointments,'categorie'=>$categorie,'region'=>$region]);
       // return new JsonResponse($advert);

    }


    /**
     * Recherche par region
     * @Route("/annonces/region/{id}", name="annonce_region", requirements ={"id":"\d+"}, methods={"GET","POST"})
     *
     */

    public function listParRegion($id,Request $request)
    {
        $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
        $advert = $advertRepository->findByRegionn($id);

        //toutes les categorie
        $categoriRepository = $this->getDoctrine()->getRepository(Categorie::class);
        $categorie = $categoriRepository->findAll();

        //toutes les Regions
        $regionRepository = $this->getDoctrine()->getRepository(Region::class);
        $region = $regionRepository->findAll();


        //$question = $questionRepository->findAll();
        /* @var $paginator \Knp\Component\Pager\Paginator */
        $paginator  = $this->get('knp_paginator');

        // Paginate the results of the query
        $appointments = $paginator->paginate(
        // Doctrine Query, not results
            $advert,
            // Define the page parameter
            $request->query->getInt('page', 1),
            // Items per page
            6
        );

        return $this->render('advert/list.html.twig',['advert'=>$appointments,'categorie'=>$categorie] );
    }

    /**
     * Recherche par categorie
     * @Route("/annonces/categorie/{id}", name="annonce_categorie", requirements ={"id":"\d+"}, methods={"GET","POST"})
     *
     */

    public function listParCategorie($id,Request $request,$prix)
    {
        $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
        $advert = $advertRepository->findByCategorie($id);

        //toutes les categorie
        $categoriRepository = $this->getDoctrine()->getRepository(Categorie::class);
        $categorie = $categoriRepository->findAll();

        //toutes les Regions
        $regionRepository = $this->getDoctrine()->getRepository(Region::class);
        $region = $regionRepository->findAll();

        //toutes
        $priceRepository = $this->getDoctrine()->getRepository(Advert::class);
        $prix =$priceRepository->findProductsExpensiveThan($prix);

        //$question = $questionRepository->findAll();
        /* @var $paginator \Knp\Component\Pager\Paginator */
        $paginator  = $this->get('knp_paginator');

        // Paginate the results of the query
        $appointments = $paginator->paginate(
        // Doctrine Query, not results
            $advert,
            // Define the page parameter
            $request->query->getInt('page', 1),
            // Items per page
            6
        );
        return $this->render('advert/list.html.twig',['advert'=>$appointments,'categorie'=>$categorie,'prix'=>$prix] );
    }

    /**
     * Recherche par categorie
     * @Route("/annonces/price/{id}/{prix}", name="annonce_prix", requirements ={"id":"\d+"}, methods={"GET","POST"})
     *
     */

    public function listParPrice($prix,Request $request,$id)
    {
        $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
        $advert = $advertRepository->findByCategorie($id);

        //toutes les categorie
        $categoriRepository = $this->getDoctrine()->getRepository(Categorie::class);
        $categorie = $categoriRepository->findAll();

        //toutes les Regions
        $regionRepository = $this->getDoctrine()->getRepository(Region::class);
        $region = $regionRepository->findAll();

        //toutes
        $priceRepository = $this->getDoctrine()->getRepository(Advert::class);
        $prix =$priceRepository->findProductsExpensiveThan($prix);

        //$question = $questionRepository->findAll();
        /* @var $paginator \Knp\Component\Pager\Paginator */
        $paginator  = $this->get('knp_paginator');

        // Paginate the results of the query
        $appointments = $paginator->paginate(
        // Doctrine Query, not results
            $advert,
            // Define the page parameter
            $request->query->getInt('page', 1),
            // Items per page
            6
        );
        return $this->render('advert/list.html.twig',['advert'=>$appointments,'categorie'=>$categorie,'region'=>$region] );
    }

    /**
     * Recherche par categorie
     * @Route("/recherche", name="_search", requirements ={"id":"\d+"}, methods={"GET","POST"})
     *
     */
    public function searchAction(Request $request)
    {
        //$request = $this->getRequest();
        $data = $request->request->get('search');
        $searchCat =$request->request->get('sorting');
        $searchRegion =$request->request->get('region');
        $searchPrice =$request->request->get('price');
        if (!empty($data)){
        $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
        $res =$advertRepository->findByName($data);
        }
        if (!empty($searchCat)){
            $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
            $res =$advertRepository->findByName($searchCat);
        }
        if (!empty($searchRegion)){
            $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
            $res =$advertRepository->findByName($searchRegion);
        }
        if (!empty($searchPrice)){
            $advertRepository = $this->getDoctrine()->getRepository(Advert::class);
            $res =$advertRepository->findByName($searchPrice);
        }

        return $this->render('advert/search.html.twig', ['res' => $res]);
    }

}
